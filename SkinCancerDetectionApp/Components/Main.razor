@page "/"

@implements IAsyncDisposable

@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="page">
    @if (_lastError is not null)
    {
        <p>Could not start video: @_lastError</p>

        if (HasReloaded == true)
        {
            <p>You may need to open the settings app to enable camera access for this app</p>
        }

        <button @onclick="Reload">Reload</button>
    }
    else
    {
        <video @ref="_videoReference" id="videoFeed">The current WebView does not support video.</video>
        <canvas class="d-none" id="currentFrame" width=@_width height=@_height />
        @if (_isPaused)
        {
            <div class="floating-btns">
                <button class="inference-btn" @onclick="ProcessFrame">Infer</button>
                <button class="cancel-btn" @onclick="ResumeCameraFeed">Cancel</button>
            </div>
        }
        else
        {
            <button class="capture-btn" @onclick="PauseCameraFeed"></button>
        }
    }
</div>

@code {
    private ElementReference? _videoReference;
    private string? _lastError;
    private int _width = 320;
    private int _height = 320;
    private bool _isPaused = false;

    [Parameter]
    [SupplyParameterFromQuery(Name = "reloaded")]
    public bool? HasReloaded { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _lastError = await JS.InvokeAsync<string?>("startCameraFeed", _videoReference);
            StateHasChanged();
        }
    }

    private void Reload()
    {
        var reloadedUri = NavigationManager.GetUriWithQueryParameter("reloaded", true);
        NavigationManager.NavigateTo(reloadedUri, true);
    }

    // TODO: pause video when a frame is captured and show options to either perform inference or cancel and resume video
    private async Task PauseCameraFeed()
    {
        _isPaused = true;
        await JS.InvokeVoidAsync("pauseCameraFeed", _videoReference);
    }

    private async Task ResumeCameraFeed()
    {
        _isPaused = false;
        await JS.InvokeVoidAsync("resumeCameraFeed", _videoReference);
    }

    private async Task ProcessFrame()
    {
        await JS.InvokeVoidAsync(
            "processFrame", "videoFeed", "currentFrame", _width, _height, DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        byte[] imageData = Convert.FromBase64String(imageString);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await JS.InvokeVoidAsync("stopCameraFeed", _videoReference);
    }
}